package {{importPackages.stubPackage}};

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.matching.StringValuePattern;
import com.github.tomakehurst.wiremock.matching.UrlPattern;
import com.github.tomakehurst.wiremock.stubbing.StubMapping;
import com.github.tomakehurst.wiremock.stubbing.StubImport;
import {{importPackages.modelPackage}}.*;

import java.util.*;

import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.jsonResponse;
import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.like;
import static com.github.tomakehurst.wiremock.client.WireMock.*;

public class {{tag}} {

    {{#paths}}
    public static class {{operationId}} {

        private static final String PATH = "{{path}}";

        private UrlPattern urlPattern;
        private final Map<String, StringValuePattern> queryParams = new LinkedHashMap<>();

        {{#queryParams}}
        public {{operationId}} inQuery{{fieldName}}({{{fieldType}}} {{methodFieldName}}) {
            queryParams.put("{{methodFieldName}}", equalTo({{methodFieldName}}.toString()));
            return this;
        }
        {{/queryParams}}

        {{#responses}}
        public Code{{code}}Builder code{{code}}(){
            return new Code{{code}}Builder();
        }

        public class Code{{code}}Builder{

            private {{#responseType}}{{responseType}}{{/responseType}}{{#description}}Object{{/description}} response;

            public Code{{code}}Builder(){
                this.response = {{#responseType}}new {{responseType}}(){{/responseType}}{{#description}}"{{description}}"{{/description}};
            }

            {{#responseField}}
            public Code{{code}}Builder with{{fieldName}}({{{fieldType}}} {{methodFieldName}}) {
                response.{{setterName}}({{methodFieldName}});
                return this;
            }
            {{/responseField}}
            public StubMapping buildStub() {
                return {{httpMethod}}(urlPattern)
                        .withQueryParams(queryParams)
                        .willReturn(like(jsonResponse(response))).build();
            }

            public void mock() {
                {{#importPackages.delegateObject}}
                {{importPackages.delegateObject}}.mock(buildStub());
                {{/importPackages.delegateObject}}
                {{^importPackages.delegateObject}}
                WireMock.importStubs(StubImport.stubImport().stub(buildStub()).build());
                {{/importPackages.delegateObject}}
            }
        }
        {{/responses}}

    }
    {{/paths}}
}
