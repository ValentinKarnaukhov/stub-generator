package {{importPackages.stubPackage}};

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.matching.*;
import com.github.tomakehurst.wiremock.stubbing.StubMapping;
import com.github.tomakehurst.wiremock.stubbing.StubImport;
import {{importPackages.modelPackage}}.*;
import {{importPackages.supportPackage}}.*;

import java.util.*;
import java.util.function.Consumer;

import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.jsonResponse;
import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.like;
import static com.github.tomakehurst.wiremock.client.WireMock.*;

public class {{tag}} {

    {{#paths}}
    public static class {{operationId}} {

        private static final String PATH = "{{path}}";

        private UrlPattern urlPattern;
        {{#bodyParams}}
        {{#collection}}
        private Collection<{{type}}> {{name}} = new ArrayList<>();
        {{/collection}}
        {{^collection}}
        private {{type}} {{name}} = new {{type}}();
        {{/collection}}
        {{/bodyParams}}
        private final Map<String, StringValuePattern> queryParams = new LinkedHashMap<>();

        //query section
        {{#queryParams}}
        {{#primitive}}
        {{#collection}}
        public {{type}}Builder<{{operationId}}> {{prefix}}{{camelizedName}}() {
            List<{{type}}> collection = new ArrayList<>();
            Consumer<{{type}}> consumer = v -> queryParams.put("{{name}}", equalTo(v.toString()));
            return new {{type}}Builder<{{operationId}}>(this, collection, consumer);
        }
        {{/collection}}
        {{^collection}}
        public {{operationId}} {{prefix}}{{camelizedName}}({{{type}}} {{name}}) {
            queryParams.put("{{name}}", equalTo({{name}}.toString()));
            return this;
        }
        {{/collection}}
        {{/primitive}}
        {{/queryParams}}

        //body section
        {{#bodyParams}}
        {{#primitive}}
        {{#collection}}
        //primitive collection
        {{/collection}}
        public {{type}}Builder<{{operationId}}> {{prefix}}() {
            List<{{type}}> collection = new ArrayList<>();
            Consumer<{{type}}> consumer = v -> {{name}}.add(v);
            return new {{type}}Builder<{{operationId}}>(this, collection, consumer);
        }
        {{^collection}}
        //primitive obj
        public {{operationId}} {{prefix}}({{{type}}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }
        {{/collection}}
        {{/primitive}}
        {{^primitive}}
        {{#collection}}
        //obj collection
        public {{{type}}}Builder<{{operationId}}> {{prefix}}(){
            Collection<{{{type}}}> collection = new ArrayList<>();
            Consumer<{{{type}}}> consumer = v -> {{name}}.add(v);
            return new {{{type}}}Builder<{{operationId}}>(this, collection, consumer);
        }
        {{/collection}}
        {{^collection}}
        //obj
        {{#fields}}
        {{#collection}}
        public {{{type}}}Builder<{{operationId}}> {{compositeName}}(){
            Collection<{{{type}}}> collection = new ArrayList<>();
            {{#..}}{{name}}{{/..}}{{wayToParent}}.{{setter}}(collection);
            Consumer<{{{type}}}> consumer = v -> {{#..}}{{name}}{{/..}}{{wayToParent}}.{{getter}}().add(v);
            return new {{type}}Builder<{{operationId}}>(this, collection, consumer);
        }
        {{/collection}}
        {{^collection}}
        public {{operationId}} {{compositeName}}({{{type}}} {{name}}){
            {{#..}}{{name}}{{/..}}{{wayToParent}}.{{setter}}({{name}});
            return this;
        }
        {{/collection}}
        {{/fields}}
        {{/collection}}
        {{/primitive}}
        {{/bodyParams}}

        {{#responses}}
        public Code{{code}}Builder code{{code}}(){
            return new Code{{code}}Builder();
        }

        public class Code{{code}}Builder{

            private {{#objectType}}{{objectType}}{{/objectType}}{{#description}}Object{{/description}} response;

            public Code{{code}}Builder(){
                this.response = {{#objectType}}new {{objectType}}(){{/objectType}}{{#description}}"{{description}}"{{/description}};
            }

            {{#fields}}
            public Code{{code}}Builder with{{compositeFieldName}}({{{fieldType}}} {{methodFieldName}}) {
                response{{wayToObject}}.{{setterName}}({{methodFieldName}});
                return this;
            }
            {{/fields}}
            public StubMapping buildStub() {
                return {{httpMethod}}(urlPattern)
                        .withQueryParams(queryParams)
                        .willReturn(like(jsonResponse(response))).build();
            }

            public void mock() {
                {{#importPackages.delegateObject}}
                {{importPackages.delegateObject}}.mock(buildStub());
                {{/importPackages.delegateObject}}
                {{^importPackages.delegateObject}}
                WireMock.importStubs(StubImport.stubImport().stub(buildStub()).build());
                {{/importPackages.delegateObject}}
            }
        }
        {{/responses}}

        {{#collections}}
        {{#primitive}}
        public static class {{type}}Builder<E> extends PrimitiveCollectionBuilder<{{type}}> {

            private E enter;

            public {{type}}Builder(E enter, Collection<{{type}}> collection, Consumer<{{type}}> consumer) {
                super(collection, consumer);
                this.enter = enter;
            }

            public {{type}}Builder<E> addNew({{type}} value) {
                this.collection.add(value);
                return this;
            }

            public E exit() {
                for({{type}} value : super.collection){
                    super.consumer.accept(value);
                }
                return this.enter;
            }
        }
        {{/primitive}}
        {{^primitive}}
        public static class {{type}}Builder<E> extends CollectionBuilder<{{type}}> {

            private E enter;

            public {{type}}Builder(E enter, Collection<{{type}}> collection, Consumer<{{type}}> consumer) {
                super(collection, consumer);
                this.enter = enter;
            }

            public {{type}}Builder<E> addNew() {
                super.value = new {{type}}();
                super.collection.add(super.value);
                return this;
            }

            {{#fields}}
            {{#collection}}
            public {{{type}}}Builder<{{#..}}{{{type}}}Builder{{/..}}> {{compositeName}}(){
                Collection<{{{type}}}> collection = new ArrayList<>();
                Consumer<{{{type}}}> consumer = v -> super.value{{wayToParent}}.{{getter}}().add(v);
                return new {{type}}Builder<{{#..}}{{{type}}}Builder{{/..}}>(this, collection, consumer);
            }
            {{/collection}}
            {{^collection}}
            public {{#..}}{{{type}}}Builder<E>{{/..}} {{compositeName}}({{{type}}} {{name}}){
                super.value{{wayToParent}}.{{setter}}({{name}});
                return this;
            }
            {{/collection}}
            {{/fields}}
            public E exit() {
                for({{type}} value : super.collection){
                    super.consumer.accept(value);
                }
                return this.enter;
            }
        }
        {{/primitive}}
        {{/collections}}
    }
    {{/paths}}

}
