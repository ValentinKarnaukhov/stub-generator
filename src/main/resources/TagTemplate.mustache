package {{importPackages.stubPackage}};

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.*;
import com.github.tomakehurst.wiremock.matching.*;
import com.github.tomakehurst.wiremock.common.Json;
import com.github.tomakehurst.wiremock.stubbing.StubMapping;
import com.github.tomakehurst.wiremock.stubbing.StubImport;
import {{importPackages.modelPackage}}.*;
import {{importPackages.supportPackage}}.*;

import java.util.*;
import java.util.function.Consumer;

import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.jsonResponse;
import static com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder.like;
import static com.github.tomakehurst.wiremock.client.WireMock.*;

public class {{tag}} {

    {{#paths}}
    public static class {{operationId}} {

        private static final String PATH = "{{path}}";

        private UrlPattern urlPattern;
        {{#bodyParams}}
        {{#collection}}
        private {{{type}}} {{name}} = {{{value}}};
        {{/collection}}
        {{^collection}}
        {{#primitive}}private {{{baseType}}} {{name}};{{/primitive}}
        {{^primitive}}private {{{baseType}}} {{name}} = new {{{baseType}}}();{{/primitive}}
        {{/collection}}
        {{/bodyParams}}
        private final Map<String, StringValuePattern> queryParams = new LinkedHashMap<>();

        {{#queryParams}}
        {{#primitive}}
        {{#collection}}
        public {{{baseType}}}Builder<{{operationId}}> {{prefix}}{{camelizedName}}() {
            {{{type}}} collection = new ArrayList<>();
            Consumer<{{{baseType}}}> consumer = v -> queryParams.put("{{name}}", equalTo(v.toString()));
            return new {{{baseType}}}Builder<{{operationId}}>(this, collection, consumer);
        }
        {{/collection}}
        {{^collection}}
        public {{operationId}} {{prefix}}{{camelizedName}}({{{baseType}}} {{name}}) {
            queryParams.put("{{name}}", equalTo({{name}}.toString()));
            return this;
        }
        {{/collection}}
        {{/primitive}}
        {{/queryParams}}

        {{#bodyParams}}
        {{#primitive}}
        {{#collection}}
        public {{{baseType}}}Builder<{{operationId}}> {{prefix}}() {
            return new {{{baseType}}}Builder<{{operationId}}>(this, {{name}});
        }
        {{/collection}}
        {{^collection}}
        public {{operationId}} {{prefix}}({{{baseType}}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }
        {{/collection}}
        {{/primitive}}
        {{^primitive}}
        {{#collection}}
        public {{{baseType}}}Builder<{{operationId}}> {{prefix}}(){
            return new {{{baseType}}}Builder<{{operationId}}>(this, {{name}});
        }
        {{/collection}}
        {{^collection}}
        {{#fields}}
        {{#collection}}
        public {{{baseType}}}Builder<{{operationId}}> {{compositeName}}(){
            {{{type}}} collection = {{{value}}};
            {{../name}}{{wayToParent}}.{{setter}}(collection);
            return new {{{baseType}}}Builder<{{operationId}}>(this, collection);
        }
        {{/collection}}
        {{^collection}}
        public {{operationId}} {{compositeName}}({{{baseType}}} {{name}}){
            {{#parentType}}
            if({{../../name}}{{wayToParent}} == null){
                {{../../name}}{{parentSetter}}(new {{{parentType}}}());
            }
            {{/parentType}}
            {{../name}}{{wayToParent}}.{{setter}}({{name}});
            return this;
        }
        {{/collection}}
        {{/fields}}
        {{^fields}}
        public {{operationId}} {{prefix}}({{{baseType}}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }
        {{/fields}}
        {{/collection}}
        {{/primitive}}
        {{/bodyParams}}

        {{#responses}}
        public Code{{code}}Builder code{{code}}(){
            return new Code{{code}}Builder();
        }

        public class Code{{code}}Builder{
            {{#response}}
            {{#collection}}
            private {{{type}}} response = new ArrayList<>();
            {{/collection}}
            {{^collection}}
            {{#primitive}}private {{{baseType}}} response;{{/primitive}}
            {{^primitive}}private {{{baseType}}} response = new {{{baseType}}}();{{/primitive}}
            {{/collection}}
            {{/response}}
            {{^response}}private String response = "{{description}}";{{/response}}

            {{#response}}
            {{#primitive}}
            {{#collection}}
            public {{{baseType}}}Builder<Code{{code}}Builder> {{prefix}}() {
                return new {{{baseType}}}Builder<Code{{code}}Builder>(this, response);
            }
            {{/collection}}
            {{^collection}}
            public Code{{code}}Builder {{prefix}}({{{baseType}}} response) {
                this.response = response;
                return this;
            }
            {{/collection}}
            {{/primitive}}
            {{^primitive}}
            {{#collection}}
            public {{{baseType}}}Builder<Code{{code}}Builder> {{prefix}}(){
                return new {{{baseType}}}Builder<Code{{code}}Builder>(this, response);
            }
            {{/collection}}
            {{^collection}}
            {{#fields}}
            {{#collection}}
            public {{{baseType}}}Builder<Code{{code}}Builder> {{compositeName}}(){
                {{{type}}} collection = {{{value}}};
                response{{wayToParent}}.{{setter}}(collection);
                return new {{{baseType}}}Builder<Code{{code}}Builder>(this, collection);
            }
            {{/collection}}
            {{^collection}}
            public Code{{code}}Builder {{compositeName}}({{{baseType}}} {{name}}){
                {{#parentType}}
                if(response{{wayToParent}} == null){
                    response{{parentSetter}}(new {{{parentType}}}());
                }
                {{/parentType}}
                response{{wayToParent}}.{{setter}}({{name}});
                return this;
            }
            {{/collection}}
            {{/fields}}
            {{/collection}}
            {{/primitive}}

            public StubMapping buildStub() {
                MappingBuilder builder = {{../httpMethod}}(urlPattern)
                    .withQueryParams(queryParams)
                {{#primitive}}
                {{^collection}}.willReturn(aResponse().withBody(response).withHeader("content-type", "*/*").withStatus({{../code}}));{{/collection}}
                {{#collection}}.willReturn(like(jsonResponse(response)).withStatus({{../code}}));{{/collection}}
                {{/primitive}}
                {{^primitive}}.willReturn(like(jsonResponse(response)).withStatus({{../code}}));{{/primitive}}
                {{#../../bodyParams}}
                {{#primitive}}
                {{^collection}}
                builder.withRequestBody(equalTo({{name}}.toString()));
                {{/collection}}
                {{#collection}}
                builder.withRequestBody(equalToJson(Json.write({{name}}), true, true));
                {{/collection}}
                {{/primitive}}
                {{^primitive}}
                builder.withRequestBody(equalToJson(Json.write({{name}}), true, true));
                {{/primitive}}
                {{/../../bodyParams}}
                return builder.build();
            }

            {{/response}}
            {{^response}}
            public StubMapping buildStub() {
                MappingBuilder builder = {{../httpMethod}}(urlPattern)
                    .withQueryParams(queryParams)
                    .willReturn(aResponse().withBody(response).withHeader("content-type", "*/*").withStatus({{../code}}));
                {{#../../bodyParams}}
                {{#primitive}}
                {{^collection}}
                builder.withRequestBody(equalTo({{name}}.toString()));
                {{/collection}}
                {{#collection}}
                builder.withRequestBody(equalToJson(Json.write({{name}}), true, true));
                {{/collection}}
                {{/primitive}}
                {{^primitive}}
                builder.withRequestBody(equalToJson(Json.write({{name}}), true, true));
                {{/primitive}}
                {{/../../bodyParams}}
                return builder.build();
            }
            {{/response}}



            public void mock() {
                {{#importPackages.delegateObject}}
                {{importPackages.delegateObject}}.mock(buildStub());
                {{/importPackages.delegateObject}}
                {{^importPackages.delegateObject}}
                WireMock.importStubs(StubImport.stubImport().stub(buildStub()).build());
                {{/importPackages.delegateObject}}
            }
        }
        {{/responses}}

        {{#collections}}
        {{#primitive}}
        public static class {{{baseType}}}Builder<E> extends PrimitiveCollectionBuilder<{{{baseType}}}> {

            private E enter;

            public {{{baseType}}}Builder(E enter, Collection<{{{baseType}}}> collection, Consumer<{{{baseType}}}> consumer) {
                super(collection, consumer);
                this.enter = enter;
            }

            public {{{baseType}}}Builder(E enter, Collection<{{{baseType}}}> collection) {
                super(collection, null);
                this.enter = enter;
            }

            public {{{baseType}}}Builder<E> addNew({{{baseType}}} value) {
                this.collection.add(value);
                return this;
            }

            public E exit() {
                if(consumer!=null){
                    super.collection.forEach(super.consumer);
                }
                return this.enter;
            }
        }
        {{/primitive}}
        {{^primitive}}
        public static class {{{baseType}}}Builder<E> extends CollectionBuilder<{{{baseType}}}> {

            private E enter;

            public {{{baseType}}}Builder(E enter, Collection<{{{baseType}}}> collection, Consumer<{{{baseType}}}> consumer) {
                super(collection, consumer);
                this.enter = enter;
            }

            public {{{baseType}}}Builder(E enter, Collection<{{{baseType}}}> collection) {
                super(collection, null);
                this.enter = enter;
            }

            public {{{baseType}}}Builder<E> addNew() {
                super.value = new {{{baseType}}}();
                super.collection.add(super.value);
                return this;
            }

            {{#fields}}
            {{#collection}}
            public {{{baseType}}}Builder<{{{../baseType}}}Builder<E>> {{compositeName}}(){
                {{{type}}} collection = {{{value}}};
                this.value{{wayToParent}}.{{setter}}(collection);
                return new {{{baseType}}}Builder<{{{../baseType}}}Builder<E>>(this, collection);
            }
            {{/collection}}
            {{^collection}}
            public {{{../baseType}}}Builder<E>{{compositeName}}({{{baseType}}} {{name}}){
                {{#parentType}}
                if(super.value{{wayToParent}} == null){
                    super.value{{parentSetter}}(new {{{parentType}}}());
                }
                {{/parentType}}
                super.value{{wayToParent}}.{{setter}}({{name}});
                return this;
            }
            {{/collection}}
            {{/fields}}
            public E exit() {
                if(consumer!=null){
                    super.collection.forEach(super.consumer);
                }
                return this.enter;
            }
        }
        {{/primitive}}
        {{/collections}}
    }
    {{/paths}}

}
